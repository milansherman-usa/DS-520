{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 3-1\n",
    "Milan Sherman"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import nsfg\n",
    "import first\n",
    "import thinkstats2\n",
    "import thinkplot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read the respondent data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "resp_df = nsfg.ReadFemResp()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Take a quick look at the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       3\n",
      "1       0\n",
      "2       0\n",
      "3       0\n",
      "4       0\n",
      "       ..\n",
      "7638    0\n",
      "7639    0\n",
      "7640    0\n",
      "7641    0\n",
      "7642    0\n",
      "Name: numkdhh, Length: 7643, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(resp_df.numkdhh)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pmf({0: 0.466178202276593, 1: 0.21405207379301322, 2: 0.19625801386889966, 3: 0.08713855815779145, 4: 0.025644380478869556, 5: 0.01072877142483318})\n"
     ]
    }
   ],
   "source": [
    "numkd_pmf = thinkstats2.Pmf(resp_df.numkdhh)\n",
    "print(numkd_pmf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The pmf determines the empirical probability of having 0 through 5 children in the household"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "numkd_pmf = thinkstats2.Pmf(resp_df.numkdhh, label = 'actual')\n",
    "thinkplot.Hist(numkd_pmf)\n",
    "thinkplot.Config(xlabel = 'Number of children',\n",
    "                 ylabel = 'Probability')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we calculate the biased pmf based on observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Biased_pmf(pmf, label):\n",
    "    new_pmf = pmf.Copy(label = label)\n",
    "    \n",
    "    for x, p in pmf.Items():\n",
    "        new_pmf.Mult(x, x)\n",
    "        \n",
    "    new_pmf.Normalize()\n",
    "    return new_pmf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "biased_numkd_pmf = Biased_pmf(numkd_pmf, 'observed')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 576x432 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "thinkplot.Pmfs([numkd_pmf, biased_numkd_pmf])\n",
    "thinkplot.Show(xlabel = 'Number of children', ylabel = 'PMF')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.024205155043831\n",
      "2.403679100664282\n"
     ]
    }
   ],
   "source": [
    "print(numkd_pmf.Mean())\n",
    "print(biased_numkd_pmf.Mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The mean of children per household is about 1, while the mean of the observed number is 2.4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 3-2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pmf({0: 0.466178202276593, 1: 0.21405207379301322, 2: 0.19625801386889966, 3: 0.08713855815779145, 4: 0.025644380478869556, 5: 0.01072877142483318})\n"
     ]
    }
   ],
   "source": [
    "print(numkd_pmf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "def meanPmf(pmf):\n",
    "    pmf2 = pmf.Copy()\n",
    "    for x, p in pmf.Items():\n",
    "        pmf2[x] = x*p\n",
    "    mean = pmf2.Total()\n",
    "    return mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.024205155043831"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meanPmf(numkd_pmf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "def varPmf(pmf):\n",
    "    pmf2 = pmf.Copy()\n",
    "    mean = meanPmf(pmf)\n",
    "    for x, p in pmf.Items():\n",
    "        pmf2[x] = (x - mean)**2*p\n",
    "    variance = pmf2.Total()\n",
    "    return variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.4128643263531195\n",
      "1.4128643263531195\n"
     ]
    }
   ],
   "source": [
    " print(numkd_pmf.Var())\n",
    "print(varPmf(numkd_pmf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
